import warnings
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch import Tensor
from typing import Callable, Optional

from torch.nn.modules.loss import _WeightedLoss


class FocalLoss(_WeightedLoss):

    __constants__ = ['ignore_index', 'reduction']
    ignore_index: int

    def __init__(self, alpha=1, gamma=2, weight: Optional[Tensor] = None, size_average=None, ignore_index: int = -100,
                 reduce=None, reduction: str = 'mean') -> None:
        super(FocalLoss, self).__init__(weight, size_average, reduce, reduction)
        self.ignore_index = ignore_index
        self.alpha = alpha
        self.gamma = gamma

    def forward(self, inputs: Tensor, target: Tensor) -> Tensor:
        ce = F.cross_entropy(inputs, target, weight=self.weight,
                             ignore_index=self.ignore_index, reduction=self.reduction)
        p_t = torch.exp(-ce)
        focal_loss = self.alpha * (1 - p_t) ** self.gamma * ce

        if self.reduction == 'mean':
            loss = focal_loss.mean()
        else:
            loss = focal_loss.sum()
        return loss
